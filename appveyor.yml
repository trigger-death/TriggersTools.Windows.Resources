version: '0.0.1.{build}'
environment:
  baseVersion: '1.0.2'
  releaseBuild: ''
  preLabel: 'build'
  prePadding: 6
  
image: Visual Studio 2017
configuration: Release
platform: Any CPU

dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  version: '$(packageVersion)'
  package_version: '$(packageVersion)'
  assembly_version: '$(buildVersion)'
  file_version: '$(buildVersion)'
  informational_version: '$(packageVersion)'

build:
  verbosity: minimal

branches:
  only:
    - master

init:
- ps: >-
    $env:runNugetDeploy  = "false";

    if ($env:releaseBuild) {
      $releaseBuildVersion   = "$env:baseVersion.$env:releaseBuild";
      $releasePackageVersion = "$env:baseVersion.$env:releaseBuild";
    } else {
      $releaseBuildVersion   = "$env:baseVersion.0";
      $releasePackageVersion = "$env:baseVersion";
    }
    $preBuildVersion    = "$env:baseVersion.$env:appveyor_build_number";
    $preCounterPadded   = "$env:appveyor_build_number".PadLeft($env:prePadding, "0");
    $prePackageVersion  = "$env:baseVersion-$env:preLabel-$preCounterPadded";

    if (!$env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED) { $env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED = " " }
    if ($env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED.Contains("[release]")) {
      echo "==== RELEASE BUILD ====";

      $env:runNugetDeploy  = "true";
      $env:buildVersion    = "$releaseBuildVersion";
      $env:packageVersion  = "$releasePackageVersion";
    } elseif ($env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED.Contains("[build]")) {
      echo "==== PRE-RELEASE BUILD ====";

      $env:runNugetDeploy  = "true";
      $env:buildVersion    = "$preBuildVersion";
      $env:packageVersion  = "$prePackageVersion";
    } else {
      echo "==== TEST BUILD ====";

      echo "Prerelease Build Version = $preBuildVersion";
      echo "Prerelease Package Version = $prePackageVersion";
      echo "Release Build Version = $releaseBuildVersion";
      echo "Release Package Version = $releasePackageVersion";

      $env:buildVersion    = "$preBuildVersion";
      $env:packageVersion  = "$prePackageVersion";
    }
    Update-AppveyorBuild -Version $env:buildVersion;

before_build:
- nuget restore

artifacts:
- path: '**\*.nupkg'

deploy:
  provider: NuGet
  api_key:
    secure: QVGLofIy2zySjb1ZW8e730tg6PxVB+++YvaJh/Dc54LA6h6u+2Cf4davQ9PPGn7E
  artifact: /.*\.nupkg/
  on:
    runNugetDeploy: true
